#!/bin/bash

tags() {
  git tag --sort=version:refname
}

newest_tag() {
  tags | tail -1
}
commits_between_latest_tag_and_master() {
  echo previous_tag
  git rev-list $(newest_tag)..master --pretty
}

jira_tickets_ids_between_tags() {
  commits_between_latest_tag_and_master | grep -Eo "JC-[0-9]+" | sort | uniq -i
}

print_deployed_tickets() {
  jira_tickets_ids_between_tags | awk '{ print "https://netguru.atlassian.net/browse/"$0 }'
}

origin_url() {
  git remote get-url origin |  sed -e's/git@github.com://' -e's/\.git$//'
}

require_clean_work_tree () {
    # Update the index
    git update-index -q --ignore-submodules --refresh
    err=0

    # Disallow unstaged changes in the working tree
    if ! git diff-files --quiet --ignore-submodules --
    then
        echo >&2 "you have unstaged changes."
        git diff-files --name-status -r --ignore-submodules -- >&2
        err=1
    fi

    # Disallow uncommitted changes in the index
    if ! git diff-index --cached --quiet HEAD --ignore-submodules --
    then
        echo >&2 "your index contains uncommitted changes."
        git diff-index --cached --name-status -r --ignore-submodules HEAD -- >&2
        err=1
    fi

    if [ $err = 1 ]
    then
        echo >&2 "Please commit or stash them."
        exit 1
    fi
}

log() {
  text=$1

  red=`tput setaf 1`
  green=`tput setaf 2`
  reset=`tput sgr0`

  main_color="${green}"

  echo
  echo
  echo "${main_color}"
  echo "=============================="
  echo "$text"
  echo "=============================="
  echo "${reset}"
}

########################
#### PREREQUSITES ######
########################

require_clean_work_tree

read -p "Did you inform #project-jaacoo about deployment? (y/n)" -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]
then
  exit 1
fi

read -p "Did you get green light from QAs? (y/n)" -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]
then
  exit 1
fi

read -p "Did you make sure that changes will work with current production api/frontend? (y/n)" -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]
then
  exit 1
fi

########################
## CREATE NEW RELEASE ##
########################

git tag | xargs git tag -d # delete local tags

git checkout master
git pull origin master --tags

echo "Latest tag: $(newest_tag)"

echo "Provide new tag:"
read new_tag

git tag $new_tag -m "Deploy $(date +'%Y-%m-%d')
$(print_deployed_tickets)"

git push origin $new_tag

########################
## DEPLOY PRODUCTION ###
########################

git checkout production
git pull origin production --tags
git rebase master
git push origin production
git checkout master

########################
#### MANUAL ACTIONS ####
########################

log "CircleCI"
echo "Wait for CircleCI, before proceeding:"
echo "https://circleci.com/gh/$(origin_url)/tree/production"

if [ -s ./RELEASE_TODO ]
then
  log "Perform release tasks"
  cat ./RELEASE_TODO
fi


log "Check the app"
echo "https://beta.jaacoo.com/"


log "Notify others about finished deployment"
echo "Write on Slack:"
echo "Deployment finished: https://github.com/$(origin_url)/releases/tag/$new_tag"

########################
###### CLEAN UP ########
########################
if [ -s ./RELEASE_TODO ]
then
  log "Clean up RELEASE_TODO"
  git branch -d clean-up-release-todo
  git checkout -b clean-up-release-todo
  > RELEASE_TODO
  git add RELEASE_TODO
  git commit -m "Clean up RELEASE_TODO"
  git push -u origin clean-up-release-todo
  git checkout master
  echo "Create pull request to clean RELEASE_TODO"
  echo "https://github.com/$(origin_url)/compare/clean-up-release-todo?expand=1"
fi

log "$new_tag release completed"
